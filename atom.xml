<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CBlog</title>
  
  <subtitle>记录科研日常</subtitle>
  <link href="https://yangchen.pro/atom.xml" rel="self"/>
  
  <link href="https://yangchen.pro/"/>
  <updated>2020-09-19T06:34:43.461Z</updated>
  <id>https://yangchen.pro/</id>
  
  <author>
    <name>YANG CHEN</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>01 什么是机器学习</title>
    <link href="https://yangchen.pro/2020/09/19/01-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BB%8B%E7%BB%8D/"/>
    <id>https://yangchen.pro/2020/09/19/01-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-09-19T03:36:30.000Z</published>
    <updated>2020-09-19T06:34:43.461Z</updated>
    
    <content type="html"><![CDATA[<p>机器学习其实只有三个步骤，这三个步骤简化了整个process。可以类比为把大象放进冰箱。我们把大象塞进冰箱需要三个步骤：把门打开；象塞进去；然后把门关起来。机器学习的三个步骤就好比把大象放进冰箱，也只需要三个步骤：</p><center><img src="img\b0002_introduction\chapter1-20.png" alt="learning map" width="60%;" /></center><a id="more"></a><h1 id="1-机器学习简介"><a href="#1-机器学习简介" class="headerlink" title="1. 机器学习简介"></a>1. 机器学习简介</h1><p>人工智能是什么呢？人工智能其实一点都不是新的词汇，人工智能（Artificial Intelligence）这个词汇，在19世纪50年代就有了。那这个词意味着什么呢？这个词意味着一个人类长远以来的目标，希望机器可以跟人一样的聪明。在科幻小说里面，我们看要很多这样的幻想和期待。但很长段时间里面，人们并不知道怎么做到人工智能这件事情，直到后来，大概19世纪80年代以后，有了机器学习的方法。那么机器学习顾名思义，从名字就可以被猜出，就是让机器具有学习的能力。所以机器学习跟人工智能之间有什么关系呢？</p><p>人工智能是我们想要达成的目标，而机器学习是想要达成目标的手段，希望机器通过学习方式，他跟人一样聪明。而深度学习和机器学习有什么关系呢？深度学习就是机器学习的其中一种方法。</p><p>在有深度学习、机器学习之前，人们用什么样的方式来做到人工智能这件事呢？我记得高中生物学告诉我们说：生物的行为取决于两件事，一个是后天学习的结果，不是后天学习的结果就是先天的本能。对于机器来说也是一样，他怎么样表现的很有智慧，要么就是通过后天学习的手段表现的很有智慧，要么就是它的先天的本能。机器为什么会有先天的本能，那可能就是他的创造者，其实都是人类，帮它事先设立好的。</p><p>现在先来看一下生物的本能，讲一个跟机器学习一点都没有关系的内容：生物的本能。河狸会筑水坝把水挡起来，但是它怎么知道要筑水坝呢？河狸筑水坝能力是天生的。也就是说，假设河狸他在实验室出生，它没有父母叫他怎么筑水坝。但是他一生下来，它心里就有个冲动，就是它想要筑水坝。那如果我们要程序语言来描述他的话，他那的程序语言就是这样的：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">If</span><br><span class="line">它听到流水声</span><br><span class="line">Then</span><br><span class="line">它就筑水坝直到他听不到流水声。</span><br></pre></td></tr></table></figure><p>所以，生物学家就可以欺负河狸，用一个扬声器来播放流水声，如果把扬声器放在水泥墙里面，然后河狸就会在水泥墙上面的放很多的树枝，在水泥墙上面筑堤，想把扬声器的声音盖住。如果你把扬声器放在地上，河狸就会用树枝把他盖住直到你听不见扬声器的声音为止。这就是生物的本能，那机器的本能跟生物的本能其实也很像。</p><p>假设有一天你想要做一个 chat-bot，如果你不是用机器学习的方式，而是给他天生的本能的话，那像是什么样子呢？你可能就会在这个 chat-bot 里面，在这个聊天机器人里面的设定一些规则，这些规则我们通常称 hand-crafted rules，叫做人设定的规则。那假设你今天要设计一个机器人，他可以帮你打开或关掉音乐，那你的做法可能是这样：设立一条规则，就是写程序。如果输入的句子里面看到 <em>turn off</em> 这个词汇，那 chat-bot 要做的事情就是把音乐关掉。这个时候，你之后对 chat-bot 说，<em>Please turn off the music</em> 或 <em>can you turn off the music, Smart?</em> 它就会帮你把音乐关掉。看起来好像很聪明。别人就会觉得果然这就是人工智慧。但是如果你今天想要欺负 chat-bot 的话，你就可以说 <em>please don‘t turn off the music</em>，但是他还是会把音乐关掉。这是个真实的例子，你可以看看你身边有没有这种类似的 chat-bot，然后你去真的对他说这种故意欺负它的话，它其实是会答错的。这是真实的例子，但是不告诉他是哪家公司产品，这家公司也是号称他们做很多 AI 的东西的。</p><p>使用 hand-crafted rules 有什么样的坏处呢，它的坏处就是：使用 hand-crafted rules 你没办法考虑到所有的可能性，它非常的僵化，而用 hand-crafted rules 创造出来的 machine，它永远没有办法超过它的创造者——人类。人类想不到东西，就没办法写规则，没有写规则，机器就不知道要怎么办。所以如果一个机器，它只能够按照人类所设定好的 hand-crafted rules，它整个行为都是被规定好的，没有办法 freestyle。如果是这样的话，它就没有办法超越创造他的人类。</p><p>你可能会说，但是你好像看到很多 chat-bot 看起来非常的聪明。如果你是有一个是一个非常大的企业，他给以派给成千上万的工程师，用血汗的方式来建出数以万计的规则，然后让他的机器看起来好像很聪明。但是对于中小企业来说，这样建规则的方式反而是不利的。所以我认为机器学习发展，对比较小规模企业反而是更有利的。因为接下来，不需要非常大量的人来帮你想各式各样的规则，只要手上有 data，你可以让机器来帮你做这件事情。当然怎么收集 data 又是另外一个问题，这不是我们今天要讨论的主题。</p><p>AI 这个词现在非常非常非常非常的热门，所以会有各式各样、奇奇怪怪的东西，我觉得现在非常经常碰到的一个问题，也许可用以下这个漫画来说明，这是四格漫画，而这个漫画并不是随随便便的一个四格漫画，这个漫画是 facebook 上的漫画。</p><center><img src="img\b0002_introduction\chapter1-7.png" alt="learning map" width="60%;" /></center><p>这个漫画想要说的是：现在你一定常常新闻或者是商场上看到这个讯息，有一个seller说看看我们最新的人工智慧机器人，它就是非常的人工智慧。这个系统搭配一个能言善道seller，加上一个非常非常潮的前端和外壳，里面是什么没有人知道。</p><p>外面的观众就问说：他是用什么neural方法做的，反正就是最潮的AI的技术。但是你把他剖来看一看，里面通通都是if掉出来。</p><p>现在政府、企业都说想要推广的AI，可是他们想要推广AI其实是这种AI。那这个其实都不是我们现在应该做的事，如果你要推动，如果你要推广的是这种hand-crafted AI的话，你怎么五十年前不推广，一直到今天才出来做呢？今天我们要走的不是这个路线，如果是这个路线是要被diss的。</p><p>我们要做的其实是让机器他有自己学习的能力，也就我们要做的应该 machine learning 的方向。讲的比较拟人化一点，所谓 machine learning 的方向，就是你就写段程序，然后让机器人变得了很聪明，他就能够有学习的能力。接下来，你就像教一个婴儿、教一个小孩一样的教他，你并不是写程序让他做到这件事，你是写程序让它具有学习的能力。然后接下来，你就可以用像教小孩的方式告诉它。假设你要叫他学会做语音辨识，你就告诉它这段声音是 “Hi”，这段声音就是 “How are you”，这段声音是 “Good bye”。希望接下来它就学会了，你给它一个新的声音，它就可以帮你产生语音辨识的结果。</p><p>如果你希望他学会怎么做影像辨识，你可能不太需要改太多的程序。因为他本身就有这种学习的能力，你只是需要交换下告诉它：看到这张图片，你要说这是猴子；看到这张图片，然后说是猫；看到这张图片，可以说是狗。它具有影像辨识的能力，接下来看到它之前没有看过的猫，希望它可以认识。</p><p>如果讲的更务实一点的话，machine learning 所做的事情，你可以想成就是在寻找一个 function，要让机器具有一个能力，这种能力是根据你提供给他的资料，它去寻找出我们要寻找的 function。还有很多关键问题都可以想成是我们就是需要一个 function。</p><p>在语音辨识这个问题里面，我们要找一个 function，它的输入是声音讯号，他的输出是语音辨识的文字。这个 function 非常非常的复杂，有人会想说我来用一些写规则的方式，读很多语言学文献，然后写一堆规则，然后做语音辨识。这件事情，60年代就有人做，但到现在都还没有做出来。语音辨识太过复杂，这个 function 太过的复杂，不是人类所可以写出来，这是可以想象的。所以我们需要凭借的机器的力量，帮我们把这个 function 找出来。</p><p>假设你要做影像辨识，那就是找一个 function，输入一张图片，然后输出图片里面有什么样的东西。 或者是大家都一直在说的 Alpha GO，如果你要做一个可以下围棋 machine 时，其实你需要的也就是找一个 function。这个 function 的输入是围棋上19 * 19的棋盘。告诉机器在19 * 19的棋盘上，哪些位置有黑子，哪些位置有白子。然后机器就会告诉你，接下来下一步应该落子在哪。或者是你要做一个聊天机器人，那你需要的是一个 function，这个 function 的输入就是使用者的 input，它的输出就是机器的回应。</p><p>以下我先很简短的跟大家说明怎么样找出这个 function，找出 function 的 framework 是什么呢？我们以影像辨识为例，我们找个 function 输入一张图片，它告诉我们这个图片里面有什么样的东西。</p><center><img src="img\b0002_introduction\chapter1-12.png" alt="learning map" width="60%;" /></center><p>在做这件事时，你的起手事是你要先准备一个 function set，这个 function 里面有成千上万的 function。举例来说，这个 function 里面有一个f1，你给它看一只猫，它就告诉你输出猫，看一只狗就输出狗。有一个function f2它很怪，你给它看猫，它说是猴子；你给他看狗，它说是蛇。你要准备一个 function set，这个 function set 里面有成千上万的 function。这件事情讲起来可能有点抽象，你可能会怀疑说怎么会有成千上万的 function，我怎么把成千上万的function收集起来，这个内容我们之后会再讲。总之，我们先假设你手上有一个function set，这个function set就叫做model(模型)。</p><center><img src="img\b0002_introduction\chapter1-13.png" alt="learning map" width="60%;" /></center><p>有了这个 function set，接下来机器要做的事情是：它有一些训练的资料，这些训练资料告诉机器说一个好的 function，它的输入输出应该长什么样子，有什么样关系。你告诉机器说，现在在这个影像辨识的问题里面，如果看到这个猴子就输出猴子，看到这个猫的图就输出猫，看到这个狗的图，就要输出狗，这样才是对的。有了这些训练资料，你拿出一个 function，机器就可以判断说，这个 function 是好的还是不好的。</p><center><img src="img\b0002_introduction\chapter1-16.png" alt="learning map" width="60%;" /></center><p>机器可以根据训练资料判断一个 function 是好的，还是不好的。举例来说：在这个例子里面显然 $f_1$，他比较符合 training data 的叙述，比较符合我们的知识。所以f1看起来是比较好的。$f_2$ 看起来是一个荒谬的 function。我们今天讲的这个 task 叫做 supervised learning 。</p><p>如果你告诉机器 input 和 output 这就叫做 supervised learning，之后我们也会讲到其他不同的学习场景。现在机器有办法决定一个 function 的好坏。但光能够决定一个 function 的好坏是不够的，因为在你的 function set 里面，他有成千上万的 function，它有会无穷无尽的 function，所以我们需要一个有效率的演算法，有效率的演算法可以从 function set 里面挑出最好的 function。一个一个衡量 function 的好坏太花时间，实际上做不到。所以我们需要有一个好的演算法，从 function set 里面挑出一个最好的的 function，这个最好的 function 将它记为 $f^*$。</p><p>找到 $f^*$ 之后，我们希望用它应用到一些场景中，比如：影像辨识，输入一张在机器没有看过的猫，然后希望输出也是猫。你可能会说：机器在学习时没有看到这只猫，那咋样知道在测试时找到的最好 function 可以正确辨识这只猫呢？这就是机器学习里面非常重要的问题：机器有举一反三的能力，这个内容后面再讲。</p><center><img src="img\b0002_introduction\chapter1-19.png" alt="learning map" width="60%;" /></center><p>如上图，左边这个部分叫 training，就是学习的过程；右边这个部分叫做 testing，学好以后你就可以拿它做应用。所以machine learning framework 整个过程分成了三个步骤。第一个步骤就是找一个 function，第二个步骤让 machine 可以衡量一个 function 是好还是不好，第三个步骤是让 machine 有一个自动的方法，有一个好演算法可以挑出最好的 function。</p><p>机器学习其实只有三个步骤，这三个步骤简化了整个process。可以类比为把大象放进冰箱。我们把大象塞进冰箱需要三个步骤：把门打开；象塞进去；然后把门关起来。机器学习的三个步骤就好比把大象放进冰箱，也只需要三个步骤：</p><center><img src="img\b0002_introduction\chapter1-20.png" alt="learning map" width="60%;" /></center><h1 id="2-机器学习相关技术"><a href="#2-机器学习相关技术" class="headerlink" title="2. 机器学习相关技术"></a>2. 机器学习相关技术</h1><p>下图中，同样的颜色指的是同一个类型的事情</p><p>蓝色方块指的是 scenario，即学习的情境。通常学习的情境是我们没有办法控制的，比如做 reinforcement Learning 是因为我们没有 data，没有办法来做supervised Learning 的情况下才去做的。如果有 data，supervised Learning 当然比 reinforcement Learning 要好；因此手上有什么样的 data，就决定你使用什么样的 scenario</p><p>红色方块指的是 task，即要解决的问题。你要解的问题，随着你要找的 function 的 output 的不同，有输出 scalar 的 regression、有输出 options 的  classification、有输出 structured object 的 structured Learning…</p><p>绿色的方块指的是 model，即用来解决问题的模型（function set）。在这些 task 里面有不同的 model，也就是说，同样的 task，我们可以用不同的方法来解它，比如 linear model、Non-linear model(deep Learning、SVM、decision tree、K-NN…)</p><center><img src="img\b0002_introduction\learning_map.png" alt="learning map" width="60%;" /></center><h2 id="2-1-监督学习（Supervised-Learning）"><a href="#2-1-监督学习（Supervised-Learning）" class="headerlink" title="2.1 监督学习（Supervised Learning）"></a>2.1 监督学习（Supervised Learning）</h2><p>supervised learning 需要大量的training data，这些training data告诉我们说，一个我们要找的function，它的input和output之间有什么样的关系</p><p>而这种function的output，通常被叫做label(标签)，也就是说，我们要使用supervised learning这样一种技术，我们需要告诉机器，function的input和output分别是什么，而这种output通常是通过人工的方式标注出来的，因此称为人工标注的label，它的缺点是需要大量的人工effort</p><h3 id="2-1-1-回归（Regression）"><a href="#2-1-1-回归（Regression）" class="headerlink" title="2.1.1 回归（Regression）"></a>2.1.1 回归（Regression）</h3><p>regression是machine learning的一个task，特点是==通过regression找到的function，它的输出是一个scalar数值==</p><p>比如PM2.5的预测，给machine的training data是过去的PM2.5资料，而输出的是对未来PM2.5的预测<strong>数值</strong>，这就是一个典型的regression的问题</p><h3 id="2-1-2-分类（Classification）"><a href="#2-1-2-分类（Classification）" class="headerlink" title="2.1.2 分类（Classification）"></a>2.1.2 分类（Classification）</h3><p>regression和classification的区别是，我们要机器输出的东西的类型是不一样的，在regression里机器输出的是scalar，而classification又分为两类：</p><h4 id="1-二元分类（Binary-Classification）"><a href="#1-二元分类（Binary-Classification）" class="headerlink" title="1) 二元分类（Binary Classification）"></a>1) 二元分类（Binary Classification）</h4><p>在binary classification里，我们要机器输出的是yes or no，是或否</p><p>比如G-mail的spam filtering(垃圾邮件过滤器)，输入是邮件，输出是该邮件是否是垃圾邮件</p><h4 id="2-多元分类（Multi-class-classification）"><a href="#2-多元分类（Multi-class-classification）" class="headerlink" title="2) 多元分类（Multi-class classification）"></a>2) 多元分类（Multi-class classification）</h4><p>在multi-class classification里，机器要做的是选择题，等于给他数个选项，每一个选项就是一个类别，它要从数个类别里面选择正确的类别</p><p>比如document classification(新闻文章分类)，输入是一则新闻，输出是这个新闻属于哪一个类别(选项)</p><h3 id="2-1-3-选择模型"><a href="#2-1-3-选择模型" class="headerlink" title="2.1.3 选择模型"></a>2.1.3 选择模型</h3><p>在解任务的过程中，第一步是要选一个function的set，选不同的function set，会得到不同的结果；而选不同的function set就是选不同的model，model又分为很多种：</p><ul><li><p>Linear Model(线性模型)：最简单的模型</p></li><li><p>Non-linear Model(非线性模型)：最常用的模型，包括：</p><ul><li><p><strong>deep learning</strong></p><p>  如alpha-go下围棋，输入是当前的棋盘格局，输出是下一步要落子的位置；由于棋盘是19*19的，因此可以把它看成是一个有19*19个选项的选择题</p></li><li><p><strong>SVM</strong></p></li><li><p><strong>decision tree</strong></p></li><li><p><strong>K-NN</strong></p></li></ul></li></ul><h2 id="2-2-半监督学习（Semi-supervised-Learning）"><a href="#2-2-半监督学习（Semi-supervised-Learning）" class="headerlink" title="2.2 半监督学习（Semi-supervised Learning）"></a>2.2 半监督学习（Semi-supervised Learning）</h2><p>举例：如果想要做一个区分猫和狗的function</p><p>手头上有少量的labeled data，它们标注了图片上哪只是猫哪只是狗；同时又有大量的unlabeled data，它们仅仅只有猫和狗的图片，但没有标注去告诉机器哪只是猫哪只是狗</p><p>在Semi-supervised Learning的技术里面，这些没有labeled的data，对机器学习也是有帮助的</p><center><img src="img\b0002_introduction\semi-supervised-Learning.png" alt="semi-supervised" width="60%;" /></center><h2 id="2-3-迁移学习（Transfer-Learning）"><a href="#2-3-迁移学习（Transfer-Learning）" class="headerlink" title="2.3 迁移学习（Transfer Learning）"></a>2.3 迁移学习（Transfer Learning）</h2><p>假设一样我们要做猫和狗的分类问题</p><p>我们也一样只有少量的有labeled的data；但是我们现在有大量的不相干的data(不是猫和狗的图片，而是一些其他不相干的图片)，在这些大量的data里面，它可能有label也可能没有label</p><p>Transfer Learning要解决的问题是，这一堆不相干的data可以对结果带来什么样的帮助</p><center><img src="img\b0002_introduction\transfer-Learning.png" alt="transfer" width="60%;" /></center><h2 id="2-4-无监督学习（Unsupervised-Learning）"><a href="#2-4-无监督学习（Unsupervised-Learning）" class="headerlink" title="2.4 无监督学习（Unsupervised Learning）"></a>2.4 无监督学习（Unsupervised Learning）</h2><p>区别于supervised learning，unsupervised learning希望机器学到无师自通，在完全没有任何label的情况下，机器到底能学到什么样的知识</p><p>举例来说，如果我们给机器看大量的文章，机器看过大量的文章之后，它到底能够学到什么事情？它能不能学会每个词汇的意思？</p><p>学会每个词汇的意思可以理解为：我们要找一个function，然后把一个词汇丢进去，机器要输出告诉你说这个词汇是什么意思，也许他用一个向量来表示这个词汇的不同的特性，不同的attribute</p><p>又比如，我们带机器去逛动物园，给他看大量的动物的图片，对于unsupervised learning来说，我们的data中只有给function的输入的大量图片，没有任何的输出标注；在这种情况下，机器该怎么学会根据testing data的输入来自己生成新的图片？</p><center><img src="img\b0002_introduction\unsupervised-Learning.png" width="60%;" /></center><h2 id="2-5-结构化学习（Structured-Learning）"><a href="#2-5-结构化学习（Structured-Learning）" class="headerlink" title="2.5 结构化学习（Structured Learning）"></a>2.5 结构化学习（Structured Learning）</h2><p>在structured Learning里，我们要机器输出的是，一个有结构性的东西</p><p>在分类的问题中，机器输出的只是一个选项；在structured类的problem里面，机器要输出的是一个复杂的物件</p><p>举例来说，在语音识别的情境下，机器的输入是一个声音信号，输出是一个句子；句子是由许多词汇拼凑而成，它是一个有结构性的object</p><p>或者说机器翻译、人脸识别(标出不同的人的名称)</p><p>比如<strong>GAN</strong>也是structured Learning的一种方法</p><center><img src="img\b0002_introduction\structured-Learning.png" alt="structured" width="60%;" /></center><h2 id="2-6-强化学习（Reinforcement-Learning）"><a href="#2-6-强化学习（Reinforcement-Learning）" class="headerlink" title="2.6 强化学习（Reinforcement Learning）"></a>2.6 强化学习（Reinforcement Learning）</h2><p><strong>Supervised Learning</strong>：我们会告诉机器正确的答案是什么 ，其特点是<strong>Learning from teacher</strong></p><ul><li>比如训练一个聊天机器人，告诉他如果使用者说了“Hello”，你就说“Hi”；如果使用者说了“Bye bye”，你就说“Good bye”；就好像有一个家教在它的旁边手把手地教他每一件事情</li></ul><p><strong>Reinforcement Learning</strong>：我们没有告诉机器正确的答案是什么，机器最终得到的只有一个分数，就是它做的好还是不好，但他不知道自己到底哪里做的不好，他也没有正确的答案；很像真实社会中的学习，你没有一个正确的答案，你只知道自己是做得好还是不好。其特点是<strong>Learning from critics</strong></p><ul><li>比如训练一个聊天机器人，让它跟客人直接对话；如果客人勃然大怒把电话挂掉了，那机器就学到一件事情，刚才做错了，它不知道自己哪里做错了，必须自己回去反省检讨到底要如何改进，比如一开始不应该打招呼吗？还是中间不能骂脏话之类的</li></ul><center><img src="img\b0002_introduction\reinforcement-Learning.png" alt="reinforcement" width="60%;" /></center><p>再拿下棋这件事举例，supervised Learning是说看到眼前这个棋盘，告诉机器下一步要走什么位置；而reinforcement Learning是说让机器和对手互弈，下了好几手之后赢了，机器就知道这一局棋下的不错，但是到底哪一步是赢的关键，机器是不知道的，他只知道自己是赢了还是输了</p><p>其实Alpha Go是用supervised Learning+reinforcement Learning的方式去学习的，机器先是从棋谱学习，有棋谱就可以做supervised的学习；之后再做reinforcement Learning，机器的对手是另外一台机器，Alpha Go就是和自己下棋，然后不断的进步。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;机器学习其实只有三个步骤，这三个步骤简化了整个process。可以类比为把大象放进冰箱。我们把大象塞进冰箱需要三个步骤：把门打开；象塞进去；然后把门关起来。机器学习的三个步骤就好比把大象放进冰箱，也只需要三个步骤：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;img\b0002_introduction\chapter1-20.png&quot; alt=&quot;learning map&quot; width=&quot;60%;&quot; /&gt;&lt;/center&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://yangchen.pro/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="有手就行系列" scheme="https://yangchen.pro/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%89%E6%89%8B%E5%B0%B1%E8%A1%8C%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="机器学习" scheme="https://yangchen.pro/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>01 什么是机器学习</title>
    <link href="https://yangchen.pro/2020/09/19/01-%E4%BB%80%E4%B9%88%E6%98%AF%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>https://yangchen.pro/2020/09/19/01-%E4%BB%80%E4%B9%88%E6%98%AF%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-09-19T03:36:30.000Z</published>
    <updated>2020-09-19T05:43:47.556Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-机器学习简介"><a href="#1-机器学习简介" class="headerlink" title="1. 机器学习简介"></a>1. 机器学习简介</h1><blockquote><p>define a set of function(model) -&gt; goodness of function -&gt; pick the best function </p></blockquote><a id="more"></a><h3 id="Learning-Map"><a href="#Learning-Map" class="headerlink" title="Learning Map"></a>Learning Map</h3><p>下图中，同样的颜色指的是同一个类型的事情</p><p>蓝色方块指的是scenario，即学习的情境。通常学习的情境是我们没有办法控制的，比如做reinforcement Learning是因为我们没有data、没有办法来做supervised Learning的情况下才去做的。如果有data，supervised Learning当然比reinforcement Learning要好；因此手上有什么样的data，就决定你使用什么样的scenario</p><p>红色方块指的是task，即要解决的问题。你要解的问题，随着你要找的function的output的不同，有输出scalar的regression、有输出options的classification、有输出structured object的structured Learning…</p><p>绿色的方块指的是model，即用来解决问题的模型(function set)。在这些task里面有不同的model，也就是说，同样的task，我们可以用不同的方法来解它，比如linear model、Non-linear model(deep Learning、SVM、decision tree、K-NN…)</p><center><img src="https://gitee.com/Sakura-gh/ML-notes/raw/master/img/learningMap.png" alt="learning map" width="60%;" /></center><h4 id="Supervised-Learning-监督学习"><a href="#Supervised-Learning-监督学习" class="headerlink" title="Supervised Learning(监督学习)"></a>Supervised Learning(监督学习)</h4><p>supervised learning 需要大量的training data，这些training data告诉我们说，一个我们要找的function，它的input和output之间有什么样的关系</p><p>而这种function的output，通常被叫做label(标签)，也就是说，我们要使用supervised learning这样一种技术，我们需要告诉机器，function的input和output分别是什么，而这种output通常是通过人工的方式标注出来的，因此称为人工标注的label，它的缺点是需要大量的人工effort</p><h5 id="Regression-回归"><a href="#Regression-回归" class="headerlink" title="Regression(回归)"></a>Regression(回归)</h5><p>regression是machine learning的一个task，特点是==通过regression找到的function，它的输出是一个scalar数值==</p><p>比如PM2.5的预测，给machine的training data是过去的PM2.5资料，而输出的是对未来PM2.5的预测<strong>数值</strong>，这就是一个典型的regression的问题</p><h5 id="Classification-分类"><a href="#Classification-分类" class="headerlink" title="Classification(分类)"></a>Classification(分类)</h5><p>regression和classification的区别是，我们要机器输出的东西的类型是不一样的，在regression里机器输出的是scalar，而classification又分为两类：</p><h6 id="Binary-Classification-二元分类"><a href="#Binary-Classification-二元分类" class="headerlink" title="Binary Classification(二元分类)"></a>Binary Classification(二元分类)</h6><p>在binary classification里，我们要机器输出的是yes or no，是或否</p><p>比如G-mail的spam filtering(垃圾邮件过滤器)，输入是邮件，输出是该邮件是否是垃圾邮件</p><h6 id="Multi-class-classification-多元分类"><a href="#Multi-class-classification-多元分类" class="headerlink" title="Multi-class classification(多元分类)"></a>Multi-class classification(多元分类)</h6><p>在multi-class classification里，机器要做的是选择题，等于给他数个选项，每一个选项就是一个类别，它要从数个类别里面选择正确的类别</p><p>比如document classification(新闻文章分类)，输入是一则新闻，输出是这个新闻属于哪一个类别(选项)</p><h5 id="model-function-set-选择模型"><a href="#model-function-set-选择模型" class="headerlink" title="model(function set) 选择模型"></a>model(function set) 选择模型</h5><p>在解任务的过程中，第一步是要选一个function的set，选不同的function set，会得到不同的结果；而选不同的function set就是选不同的model，model又分为很多种：</p><ul><li><p>Linear Model(线性模型)：最简单的模型</p></li><li><p>Non-linear Model(非线性模型)：最常用的模型，包括：</p><ul><li><p><strong>deep learning</strong></p><p>  如alpha-go下围棋，输入是当前的棋盘格局，输出是下一步要落子的位置；由于棋盘是19*19的，因此可以把它看成是一个有19*19个选项的选择题</p></li><li><p><strong>SVM</strong></p></li><li><p><strong>decision tree</strong></p></li><li><p><strong>K-NN</strong></p></li></ul></li></ul><h4 id="Semi-supervised-Learning-半监督学习"><a href="#Semi-supervised-Learning-半监督学习" class="headerlink" title="Semi-supervised Learning(半监督学习)"></a>Semi-supervised Learning(半监督学习)</h4><p>举例：如果想要做一个区分猫和狗的function</p><p>手头上有少量的labeled data，它们标注了图片上哪只是猫哪只是狗；同时又有大量的unlabeled data，它们仅仅只有猫和狗的图片，但没有标注去告诉机器哪只是猫哪只是狗</p><p>在Semi-supervised Learning的技术里面，这些没有labeled的data，对机器学习也是有帮助的</p><center><img src="https://gitee.com/Sakura-gh/ML-notes/raw/master/img/semi-supervised-Learning.png" alt="semi-supervised" width="60%;" /></center><h4 id="Transfer-Learning-迁移学习"><a href="#Transfer-Learning-迁移学习" class="headerlink" title="Transfer Learning(迁移学习)"></a>Transfer Learning(迁移学习)</h4><p>假设一样我们要做猫和狗的分类问题</p><p>我们也一样只有少量的有labeled的data；但是我们现在有大量的不相干的data(不是猫和狗的图片，而是一些其他不相干的图片)，在这些大量的data里面，它可能有label也可能没有label</p><p>Transfer Learning要解决的问题是，这一堆不相干的data可以对结果带来什么样的帮助</p><center><img src="https://gitee.com/Sakura-gh/ML-notes/raw/master/img/transfer-Learning.png" alt="transfer" width="60%;" /></center><h4 id="Unsupervised-Learning-无监督学习"><a href="#Unsupervised-Learning-无监督学习" class="headerlink" title="Unsupervised Learning(无监督学习)"></a>Unsupervised Learning(无监督学习)</h4><p>区别于supervised learning，unsupervised learning希望机器学到无师自通，在完全没有任何label的情况下，机器到底能学到什么样的知识</p><p>举例来说，如果我们给机器看大量的文章，机器看过大量的文章之后，它到底能够学到什么事情？它能不能学会每个词汇的意思？</p><p>学会每个词汇的意思可以理解为：我们要找一个function，然后把一个词汇丢进去，机器要输出告诉你说这个词汇是什么意思，也许他用一个向量来表示这个词汇的不同的特性，不同的attribute</p><p>又比如，我们带机器去逛动物园，给他看大量的动物的图片，对于unsupervised learning来说，我们的data中只有给function的输入的大量图片，没有任何的输出标注；在这种情况下，机器该怎么学会根据testing data的输入来自己生成新的图片？</p><center><img src="https://gitee.com/Sakura-gh/ML-notes/raw/master/img/unsupervised-Learning.png" width="60%;" /></center><h4 id="Structured-Learning-结构化学习"><a href="#Structured-Learning-结构化学习" class="headerlink" title="Structured Learning(结构化学习)"></a>Structured Learning(结构化学习)</h4><p>在structured Learning里，我们要机器输出的是，一个有结构性的东西</p><p>在分类的问题中，机器输出的只是一个选项；在structured类的problem里面，机器要输出的是一个复杂的物件</p><p>举例来说，在语音识别的情境下，机器的输入是一个声音信号，输出是一个句子；句子是由许多词汇拼凑而成，它是一个有结构性的object</p><p>或者说机器翻译、人脸识别(标出不同的人的名称)</p><p>比如<strong>GAN</strong>也是structured Learning的一种方法</p><center><img src="https://gitee.com/Sakura-gh/ML-notes/raw/master/img/structured-Learning.png" alt="structured" width="60%;" /></center><h4 id="Reinforcement-Learning-强化学习"><a href="#Reinforcement-Learning-强化学习" class="headerlink" title="Reinforcement Learning(强化学习)"></a>Reinforcement Learning(强化学习)</h4><p><strong>Supervised Learning</strong>：我们会告诉机器正确的答案是什么 ，其特点是<strong>Learning from teacher</strong></p><ul><li>比如训练一个聊天机器人，告诉他如果使用者说了“Hello”，你就说“Hi”；如果使用者说了“Bye bye”，你就说“Good bye”；就好像有一个家教在它的旁边手把手地教他每一件事情</li></ul><p><strong>Reinforcement Learning</strong>：我们没有告诉机器正确的答案是什么，机器最终得到的只有一个分数，就是它做的好还是不好，但他不知道自己到底哪里做的不好，他也没有正确的答案；很像真实社会中的学习，你没有一个正确的答案，你只知道自己是做得好还是不好。其特点是<strong>Learning from critics</strong></p><ul><li>比如训练一个聊天机器人，让它跟客人直接对话；如果客人勃然大怒把电话挂掉了，那机器就学到一件事情，刚才做错了，它不知道自己哪里做错了，必须自己回去反省检讨到底要如何改进，比如一开始不应该打招呼吗？还是中间不能骂脏话之类的</li></ul><center><img src="https://gitee.com/Sakura-gh/ML-notes/raw/master/img/reinforcement-Learning.png" alt="reinforcement" width="60%;" /></center><p>再拿下棋这件事举例，supervised Learning是说看到眼前这个棋盘，告诉机器下一步要走什么位置；而reinforcement Learning是说让机器和对手互弈，下了好几手之后赢了，机器就知道这一局棋下的不错，但是到底哪一步是赢的关键，机器是不知道的，他只知道自己是赢了还是输了</p><p>其实Alpha Go是用supervised Learning+reinforcement Learning的方式去学习的，机器先是从棋谱学习，有棋谱就可以做supervised的学习；之后再做reinforcement Learning，机器的对手是另外一台机器，Alpha Go就是和自己下棋，然后不断的进步</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-机器学习简介&quot;&gt;&lt;a href=&quot;#1-机器学习简介&quot; class=&quot;headerlink&quot; title=&quot;1. 机器学习简介&quot;&gt;&lt;/a&gt;1. 机器学习简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;define a set of function(model) -&amp;gt; goodness of function -&amp;gt; pick the best function &lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://yangchen.pro/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="有手就行系列" scheme="https://yangchen.pro/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%89%E6%89%8B%E5%B0%B1%E8%A1%8C%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="机器学习" scheme="https://yangchen.pro/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>机器学习有手就行系列</title>
    <link href="https://yangchen.pro/2020/09/19/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%89%E6%89%8B%E5%B0%B1%E8%A1%8C%E7%B3%BB%E5%88%97%E8%AF%B4%E6%98%8E/"/>
    <id>https://yangchen.pro/2020/09/19/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%89%E6%89%8B%E5%B0%B1%E8%A1%8C%E7%B3%BB%E5%88%97%E8%AF%B4%E6%98%8E/</id>
    <published>2020-09-19T03:27:44.000Z</published>
    <updated>2020-09-19T06:35:28.370Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>本系列教程来自台湾大学<strong>李宏毅</strong>老师的<strong>机器学习</strong>课程，在 <a href="https://github.com/Sakura-gh">Sakura-gh</a> 和 <a href="https://github.com/datawhalechina">datawhalechina</a> 的笔记基础之上进行了整理和优化，同时也参考了其他大量的笔记与博客。</p><p><strong>1. 关于课程：</strong></p><div class="note class_name">            <p>李宏毅老师的机器学习视频是机器学习领域经典的中文视频之一，也被称为中文世界中最好的机器学习视频。李老师以幽默风趣的上课风格让很多晦涩难懂的机器学习理论变得轻松易懂，并且老师会通过很多有趣的例子结合机器学习理论在课堂上展现出来，并且逐步推导深奥的理论知识。比如老师会经常用宝可梦来结合很多机器学习算法。对于想入门机器学习又想看中文讲解的人来说绝对是非常推荐的。</p>          </div><p><strong>2. 学习路线</strong></p><img src="img\b0001_jqxxysjxxlsm\learning_map.png" alt="Learning Map" style="zoom:60%;" /><p><strong>3. 系列文章</strong></p><p><strong><a href="">01 什么是机器学习</a></strong></p><p><strong>4. 参考链接：</strong></p><ul><li>课程网站：<a href="http://speech.ee.ntu.edu.tw/~tlkagk/courses.html">http://speech.ee.ntu.edu.tw/~tlkagk/courses.html</a></li><li>Sakura-gh/ML-notes：<a href="https://github.com/Sakura-gh/ML-notes">https://github.com/Sakura-gh/ML-notes</a></li><li>datawhalechina/leeml-notes：<a href="https://github.com/datawhalechina/leeml-notes">https://github.com/datawhalechina/leeml-notes</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;本系列教程来自台湾大学&lt;strong&gt;李宏毅&lt;/strong&gt;老师的&lt;strong&gt;机器学习&lt;/strong&gt;课程，在 &lt;a href=&quot;https://github.com/Sakura-gh&quot;&gt;Sakura-gh&lt;/a&gt; 和 &lt;a </summary>
      
    
    
    
    <category term="机器学习" scheme="https://yangchen.pro/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="有手就行系列" scheme="https://yangchen.pro/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%89%E6%89%8B%E5%B0%B1%E8%A1%8C%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="机器学习" scheme="https://yangchen.pro/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
